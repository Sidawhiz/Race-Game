#include "Map.h"
#include "TextureManager.h"

int roughmaze[20][25]= {
    {0,0,0,0,0,  0,0,0,0,0,  0,0,0,0,0,  0,0,0,0,0,  0,0,0,0,0},
    {0,0,0,0,0,  0,0,0,0,0,  0,0,0,0,0,  0,0,0,0,0,  0,0,0,0,0},
    {0,0,0,0,0,  0,0,0,0,0,  0,0,0,0,0,  0,0,0,0,0,  0,0,0,0,0},
    {0,0,0,0,0,  0,0,0,0,0,  0,0,0,0,0,  0,0,0,0,0,  0,0,0,0,0},
    {0,0,0,0,0,  0,0,0,0,0,  0,0,0,0,0,  0,0,0,0,0,  0,0,0,0,0},

    {0,0,0,0,0,  0,0,0,0,0,  0,0,0,0,0,  0,0,0,0,0,  0,0,0,0,0},
    {0,0,0,0,0,  0,0,0,0,0,  0,0,0,0,0,  0,0,0,0,0,  0,0,0,0,0},
    {0,0,0,0,0,  0,0,0,0,0,  0,0,0,0,0,  0,0,0,0,0,  0,0,0,0,0},
    {0,0,0,0,0,  0,0,0,0,0,  0,0,1,0,0,  0,0,0,0,0,  0,0,0,0,0},
    {0,0,0,0,0,  0,0,0,0,0,  0,0,0,0,0,  0,0,0,0,0,  0,0,0,0,0},

    {0,0,0,0,0,  0,0,0,0,0,  0,0,0,0,0,  0,0,0,0,0,  0,0,0,0,0},
    {0,0,0,0,0,  0,0,0,0,0,  0,0,0,0,0,  0,0,0,0,0,  0,0,0,0,0},
    {0,0,0,0,0,  0,0,0,0,0,  0,0,0,0,0,  0,0,0,0,0,  0,0,0,0,0},
    {0,0,0,0,0,  0,0,0,0,0,  0,0,0,0,0,  0,0,0,0,0,  0,0,0,0,0},
    {0,0,0,0,0,  0,0,0,0,0,  0,0,0,0,0,  0,0,0,0,0,  0,0,0,0,0},

    {0,0,0,0,0,  0,0,0,0,0,  0,0,0,0,0,  0,0,0,0,0,  0,0,0,0,0},
    {0,0,0,0,0,  0,0,0,0,0,  0,0,0,0,0,  0,0,0,0,0,  0,0,0,0,0},
    {0,0,0,0,0,  0,0,0,0,0,  0,0,0,0,0,  0,0,0,0,0,  0,0,0,0,0},
    {0,0,0,0,0,  0,0,0,0,0,  0,0,0,0,0,  0,0,0,0,0,  0,0,0,0,0},
    {0,0,0,0,0,  0,0,0,0,0,  0,0,0,0,0,  0,0,0,0,0,  0,0,0,0,0}
};

Map::Map()
{
    wall = TextureManager::LoadTexture("Assets/wall2.png");
    background = TextureManager::LoadTexture("Assets/bg.png");

    LoadMap(roughmaze);
    src.x = src.y = 0;
    src.h = src.w = dst.h = dst.w = 32;
}

Map::~Map()
{
}

void Map::LoadMap(int arr[20][25]){
    for(int row = 0; row<20 ; row++){
        for(int col = 0; col<25 ; col++){
            map[row][col] = arr[row][col];
        }
    }
}

void Map::DrawMap(){
    int type = 0; 
    for(int row = 0; row<20 ; row++){
        for(int col = 0; col<25 ; col++){
            type = map[row][col];
            dst.x = col*32;
            dst.y = row*32;
            switch(type)
            {
                case 0:
                    TextureManager::Draw(wall, src, dst);
                    break;
                case 1:
                    TextureManager::Draw(background, src, dst);   
                    break; 
                default:
                    break;
            }
        }
    }
}